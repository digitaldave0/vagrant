
FILE="ubuntu-18.04.5-live-server-amd64.iso"
IP = "192.168.4.155"
GW = "192.168.4.1"

$script = <<-SCRIPT
sudo apt install -y dnsmasq
sudo systemctl stop systemd-resolved
sudo ss -lp "sport = :domain"
  sudo mkdir -p /netboot/tftp
  cp -f /tmp/dnsmask.conf /etc/dnsmasq.conf
  sudo systemctl start dnsmasq
  sudo systemctl start systemd-resolved
  sudo apt install -y nfs-kernel-server -y
  sudo mkdir /netboot/nfs
  sudo echo -n "/netboot/nfs  *(rw,all_squash,sync,no_subtree_check)">>  /etc/exports
  sudo exportfs -a
  sudo apt install -y syslinux pxelinux
  sudo cp -v /usr/lib/PXELINUX/pxelinux.0 /netboot/tftp/
  sudo cp -v  /usr/lib/syslinux/modules/bios/{ldlinux.c32,libcom32.c32,libutil.c32,vesamenu.c32} /netboot/tftp
  sudo mkdir /netboot/tftp/pxelinux.cfg
  sudo touch /netboot/tftp/pxelinux.cfg/default
  sudo mkdir -v /netboot/{nfs,tftp}/ubuntu1804
  sudo mkdir -v /media/test
  sudo mount -o loop /tmp/#{FILE} /media/test/
  sudo cp -Rfv /media/test/* /netboot/nfs/ubuntu1804/
  sudo cp -f /netboot/nfs/ubuntu1804/casper/vmlinuz /netboot/tftp/ubuntu1804/
  sudo cp -f /netboot/nfs/ubuntu1804/casper/initrd /netboot/tftp/ubuntu1804/
  sudo chmod -Rfv 777 /netboot
  sudo umount /media/test
  sudo rm -f /tmp/#{FILE}
 
  sudo echo -n "
  default vesamenu.c32
 
 
label install1
menu label ^Install Ubuntu 18.04 LTS Server
menu default
kernel ubuntu1804/vmlinuz
append initrd=ubuntu1804/initrd boot=casper netboot=nfs nfsroot=192.168.50.1:/netboot/nfs/ubuntu1804/ splash toram ---
" >> /netboot/tftp/pxelinux.cfg/default
sudo chown -Rfv nobody:nogroup /netboot/nfs/*
SCRIPT

Vagrant.configure("2") do |config|


config.vm.define "pxe" do |pxe|
  pxe.vm.box = "bento/ubuntu-20.04"
  pxe.vm.hostname = "pxeserver"
  pxe.vm.network "public_network", bridge: "wlp3s0", auto_config: false
  pxe.vm.synced_folder  "../scripts/", "/vagrant"

# setup manual ip for eth1 
config.vm.provision "shell", run: "always", inline: <<-SHELL
sudo apt update -y
sudo apt install net-tools -y
ifconfig eth1 #{IP} netmask 255.255.255.0 up
route add default gw #{GW}
eval `route -n | awk '{ if ($8 ==\"eth0\" && $2 != \"0.0.0.0\") print \"route del default gw \" $2; }'`
SHELL

config.vm.provision "file", source: "../scripts/dnsmasq.conf", destination: "/tmp/dnsmask.conf"
config.vm.provision "file", source: "../scripts/#{FILE}", destination: "/tmp/#{FILE}"

# install pxe server
config.vm.provision "shell", run: "always", inline: $script
end

config.vm.define "dev" do |dev|
  dev.vm.box = "ubuntu/trusty64"
  dev.vm.hostname = "chefwrkst-dev"
  dev.vm.provision "shell", path: "provision.sh"
end


  config.vm.define "ubuntus" do |ubuntus|
  ubuntus.vm.box = "ubuntu/bionic64"
  ubuntus.vm.hostname = "ubunts"
  ubuntus.vm.network "private_network", ip: "192.168.50.10"
  #ubuntus.vm.provision "shell", path: "installpython.sh"
  end

  config.vm.define "prod" do |prod|
  prod.vm.box = "ubuntu/bionic64"
  prod.vm.hostname = "prod-ami"
  prod.vm.provision "shell", path: "installpython.sh"
  end

  config.vm.define "jenkins" do |jenkins|
    jenkins.vm.box = "ubuntu/bionic64"
    jenkins.vm.hostname = "jenkins-dev"
    jenkins.vm.provision "shell", path: "installjenkins.sh"
    jenkins.vm.network "forwarded_port", guest: 8080, host: 9090, id: "jenkins"
  end
  
  config.vm.define "lamp" do |lamp|
    lamp.vm.box = "ubuntu/bionic64"
    lamp.vm.hostname = "lamp-dev"
    lamp.vm.provision "shell", path: "installamp.sh"
    lamp.vm.network "forwarded_port", guest: 8080, host: 9090, id: "lamp"
  end
  

  config.vm.define "chefwrk" do |chefwrk|
    chefwrk.vm.box = "centos/7"
    chefwrk.vm.hostname = "chefwrks03"
    chefwrk.vm.provision "shell", path: "installchefwrk.sh"    
    end


config.vm.provision "ansible" do |ansible|
ansible.playbook = "../playbooks/setup_ubuntu1804/playbook.yml"
  end
end